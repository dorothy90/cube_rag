[
  {
    "question": "중복을 제거하고 고유 값만 선택하는 SQL은?",
    "answers": [
      "SELECT DISTINCT 컬럼 FROM 테이블; 지정한 컬럼의 중복을 제거합니다.",
      "여러 컬럼 기준이면 SELECT DISTINCT col1, col2 FROM 테이블; 형태를 사용합니다.",
      "주의: DISTINCT는 컬럼 조합의 중복을 제거하므로 SELECT 리스트 구성이 중요합니다."
    ],
    "question_author": "template",
  "answer_author": ["template", "template", "template"],
    "timestamp": "2025-01-01"
  },
  {
    "question": "INNER JOIN과 LEFT JOIN 차이는?",
    "answers": [
      "INNER JOIN은 양쪽 테이블에서 매칭되는 행만 반환합니다.",
      "LEFT JOIN은 왼쪽 테이블의 모든 행을 유지하고, 매칭되지 않는 오른쪽 컬럼은 NULL로 채웁니다.",
      "의미: 누락 행까지 포함해 보고 싶으면 LEFT, 매칭된 교집합만 필요하면 INNER를 사용합니다."
    ],
    "question_author": "template",
  "answer_author": ["template", "template", "template"],
    "timestamp": "2025-01-01"
  },
  {
    "question": "인덱스를 만드는 방법과 사용 시기는?",
    "answers": [
      "CREATE INDEX idx ON 테이블(컬럼); 자주 WHERE/JOIN에 쓰이는 컬럼에 생성합니다.",
      "읽기 성능은 향상되지만 쓰기 성능과 저장 공간 비용이 증가합니다.",
      "선택도가 낮은 컬럼이나 아주 작은 테이블에는 효과가 제한적일 수 있습니다."
    ],
    "question_author": "template",
  "answer_author": ["template", "template", "template"],
    "timestamp": "2025-01-01"
  },
  {
    "question": "정규화와 비정규화의 차이점은?",
    "answers": [
      "정규화는 중복을 최소화하고 이상현상(갱신/삭제/삽입)을 방지하기 위해 테이블을 분해합니다.",
      "비정규화는 조회 성능을 위해 의도적으로 중복을 허용하거나 테이블을 결합합니다.",
      "업무 특성에 맞춰 일관성 요구와 읽기 성능 사이의 균형을 선택합니다."
    ],
    "question_author": "template",
  "answer_author": ["template", "template", "template"],
    "timestamp": "2025-01-01"
  }
]


